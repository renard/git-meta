#!/bin/bash

# git-meta --- Handle file meta information within git

# Copyright © 2009 2010 2011 Sebastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
# Last changed: 2011-09-11 02:14:15

# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.

VERSION="1.0"

# Save perms, modifications to .gitmeta
# file format is:
# 1 - filename
# 2 - perms
# 3 - mtime
# 4 - uid
# 5 - gid

# All fields are 0x00-separated
# records are 0x000x00-separated

# Where to store data
DATA=.gitmeta
# the awk binary
AWK=/usr/bin/gawk
# Field separator (change it to \001 if not using GNU awk)
SEP='\000'
# Directory separator (change it if using something weirder than unix)
D_SEP='/'

function die() {
  echo "$@" >&2
  exit 1
}


function help {
  exit_code=${1:-1}
  cat <<EOF
Usage $0 [ options ] [ commands ]

Options:

    -O|--owner          Add symbolic owner to ${DATA}
    -o|--numeric-owner  Add numeric owner to ${DATA}
    -a|--add-to-git     Commit ${DATA}
    -P|--skip-perms     Skip perms during restore
    -M|--skip-mtime     Skip mtime during restore
    -U|--skip-user      Skip user during restore
    -G|--skip-group     Skip group during restore
    --field-sep FS      ${DATA} field separator (default '${SEP}')
    --dir-sep DS        Direcpry separator (default '${D_SEP}')
    --awk AWK           Path to awk binary (default '${AWK}')
    --data DATA         Metadata file (default '${DATA}')
    -f|--force		Run git-meta event if no change is made.
    -h|--help           Display this help screen

Commands:
    init                Setup hooks int .git directory.
    get                 Store metadata to ${DATA}
    set                 Restore metadata from ${DATA}
    dump                Dump metadata from ${DATA}
EOF
  exit ${exit_code}
}



function check_meta() {
  if ! test -e ${DATA}; then
    echo "File ${DATA} not found"
    exit 1
  fi
}

function set_fields() {
  fields="%n${SEP}%a${SEP}%Y"
  if test "${add_owner}" == "1"; then
    fields="${fields}${SEP}%U${SEP}%G"
  elif test "${add_owner}" == "2"; then
    fields="${fields}${SEP}%u${SEP}%g"
  fi
  fields="${fields}${SEP}${SEP}"
}


function get_meta() {
  # Exit if no change
  if test -z "${force}"; then
    git diff-index --exit-code --quiet HEAD && exit 0
  fi
  rm -f ${DATA}
  # Add directories
  # here we can directly use \000 since the delimiter is only used inside
  # pipes
  git ls-files -z -x "/${DATA}" | awk "
    BEGIN{FS=\"${D_SEP}\"; RS=\"\000\"; OFS=\"${D_SEP}\"; ORS=\"\000\"}
    {{
      if (NF <= 1) print \".\"OFS;
      else {\$NF=i\"\"; print substr(\$0, 1, length(\$0) - 1)OFS;}
    }}" | sort -uz | grep -vz '^\./$' | xargs -0 stat --printf "${fields}" \
      >> ${DATA}
  # Add files
  git ls-files -z -x "/${DATA}" | xargs -r -0 stat --printf "${fields}" \
    >> ${DATA}
  # Add .gitmeta to the commit set
  if test "${add_to_git}"; then
    git add ${DATA}
  fi
}

function set_meta() {
  check_meta
  # change perms
  if ! test "${skip_perm}"; then
    for perm in $(${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\"}{print \$2}" \
      ${DATA} | sort -ur); do
        ${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\";ORS=\"${SEP}\"}\
          {if(\$2==$perm)print \$1}" ${DATA} \
          | xargs -r -d "${SEP}" chmod $perm
    done
  fi
  # change mtime
  if ! test "${skip_mtime}"; then
    for epoch in $(${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\"}{print \$3}" \
      ${DATA} | sort -ur); do
        d=$(date --date "Jan 1, 1970 00:00:00 +0000 + ${epoch} seconds")
        ${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\";ORS=\"${SEP}\"}\
          {if(\$3==$epoch)print \$1}" ${DATA} \
          | xargs -r -d "${SEP}" touch -d "${d}"
    done
  fi
  # change owner
  if ! test "${skip_user}"; then
    for user in $(${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\"}{print \$4}" \
      ${DATA} | sort -ur); do
        ${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\";ORS=\"${SEP}\"}\
          {if(\$4==$user)print \$1}" ${DATA} \
          | xargs -r -d "${SEP}" chown $user
    done
  fi
  # change group
  if ! test "${skip_group}"; then
    for group in $(${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\"}{print \$5}" \
      ${DATA} | sort -ur); do
        ${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\";ORS=\"${SEP}\"}\
          {if(\$5==$group)print \$1}" ${DATA} \
          | xargs -r -d "${SEP}" chgrp $group
    done
  fi
}

function dump() {
  check_meta
  ${AWK} "BEGIN{FS=\"${SEP}\";RS=\"${SEP}${SEP}\";OFS=\"\n\";ORS=\"\n\"}{
    gsub(\"${SEP}\", \" \"); print;
  }" ${DATA} | sort -u
}

function init() {
    local dir=$(git rev-parse --git-dir)
    if test -z "${dir}"; then
	die "Not in a git dir"
    fi
    cat <<EOF > "${dir}/hooks/pre-commit"
#!/bin/sh

git meta -a get
EOF
    chmod 755 "${dir}/hooks/pre-commit"
    cat <<EOF > "${dir}/hooks/post-merge"
#!/bin/sh

git meta -a set
EOF
    chmod 755 "${dir}/hooks/post-merge"
}


add_owner=
add_to_git=
command=
skip_perm=
skip_mtime=
skip_user=
skip_group=
force=

while test $# != 0 && test -z "$command"; do
  case $1 in
    get) command=get_meta;;
    set) command=set_meta;;
    dump) command=dump;;
    init) command=init;;
    --owner|-O) add_owner=1;;
    --numeric-owner|-o) add_owner=2;;
    --add-to-git|-a) add_to_git=1;;
    -P|--skip-perms) skip_perm=1;;
    -M|--skip-mtime) skip_mtime=1;;
    -U|--skip-user) skip_user=1;;
    -G|--skip-group) skip_group=1;;
    -f|--force) force=1;;
    --field-sep)
      test -z "$2" && die "--field-sep need a parameter"
      SEP="$2"
      shift
      ;;
    --dir-sep)
      test -z "$2" && die "--dir-sep need a parameter"
      D_SEP="$2"
      shift
      ;;
    --awk)
      test -z "$2" && die "--awk need a parameter"
      AWK="$2"
      shift
      ;;
    --data)
      test -z "$2" && die "--data need a parameter"
      DATA="$2"
      shift
      ;;
    --help|-h) help 0;;
    *) help 1;;
  esac
  shift
done

set_fields

test -z "${command}" && die "No command specified"
"${command}"

exit 0
